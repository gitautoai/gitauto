<test_rules>
  <value_focused_testing>
    <rule>Test behavior, not implementation details (Behavioral Testing approach)</rule>
    <rule>Focus on what result is returned rather than which internal function is called</rule>
    <rule>Test scenarios (e.g., owner exists, repo doesn't exist) not internal function calls</rule>
  </value_focused_testing>

  <mock_management>
    <rule>Use test framework fixtures to eliminate duplicate mock setup code</rule>
    <rule>Ensure proper mock lifecycle management (Python example: use yield with with patch())</rule>
    <rule>Handle fixture parameter name conflicts (Python example: use # pylint: disable=redefined-outer-name)</rule>
    <rule>For method chaining operations (e.g., database operations), mock the entire operation as one unit rather than each individual step in the chain (Contract Testing approach) - avoid complex setups like mock.obj.method1.return_value.method2.return_value.method3.return_value</rule>
  </mock_management>

  <test_design_principles>
    <rule>Avoid testing internal implementation details</rule>
    <rule>Tests should not break when refactoring internal code structure</rule>
    <rule>Assert on meaningful outcomes, not intermediate steps</rule>
    <rule>Keep tests independent and focused on single responsibilities</rule>
  </test_design_principles>

  <test_file_organization>
    <rule>Create exactly ONE test file per source file</rule>
    <rule>NEVER create multiple test files like test_get_user_new.py, test_get_user_temp.py, test_get_user.py.deprecated</rule>
    <rule>All test cases for a single source file should be consolidated into one test file</rule>
    <rule>Use descriptive test method names within the single test file to organize different test scenarios</rule>
  </test_file_organization>

  <anti_patterns>
    <rule>Do not test implementation details instead of user-facing behavior</rule>
    <rule>Do not create tests that break when refactoring internal code structure</rule>
    <rule>Do not over-assert on internal function call parameters when the behavior is what matters</rule>
    <rule>NEVER create multiple test files like test_get_user_new.py, test_get_user_temp.py, test_get_user.py.deprecated for the same source file</rule>
    <rule>Do not create unnecessarily complex mock chains when testing method chaining - focus on the final result, not each step of the chain</rule>
  </anti_patterns>
</test_rules> 